CREATE TABLE IF NOT EXISTS BOOK (
    BOOK_ID bigint NOT NULL AUTO_INCREMENT,
    TITLE varchar(100) NOT NULL,
    AUTHOR varchar(100),
    PUBLISHER varchar(100),
    ISBN varchar(100) NOT NULL,
    DESCRIPTION varchar(255),
    IMAGE varchar(255),
    NUMBER_OF_WISHES int NOT NULL,
    CREATED_AT datetime NOT NULL,
    STATUS varchar(100) NOT NULL,
    PRIMARY KEY (BOOK_ID)
);

CREATE TABLE IF NOT EXISTS MEMBER (
    MEMBER_ID bigint NOT NULL AUTO_INCREMENT,
    EMAIL varchar(100) NOT NULL UNIQUE,
    PASSWORD varchar(100) NOT NULL,
    NAME varchar(100) NOT NULL,
    NICKNAME varchar(100) NOT NULL,
    LEVELS int NOT NULL,
    STATUS varchar(100) NOT NULL,
    CREATED_AT datetime NOT NULL,
    PRIMARY KEY (MEMBER_ID)
);

CREATE TABLE IF NOT EXISTS WISHLIST (
    WISHLIST_ID bigint NOT NULL AUTO_INCREMENT,
    MEMBER_ID bigint NOT NULL,
    BOOK_ID bigint NOT NULL,
    DUE_DATE datetime,
    IS_NOTICE int NOT NULL,
    IS_SHARED int NOT NULL,
    CREATED_AT datetime NOT NULL,
    STATUS varchar(100) NOT NULL,
    PRIMARY KEY (WISHLIST_ID),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID)
);

CREATE TABLE IF NOT EXISTS BOARD (
    BOARD_ID bigint NOT NULL AUTO_INCREMENT,
    WISHLIST_ID bigint NOT NULL,
    CREATED_AT datetime NOT NULL,
    STATUS varchar(100) NOT NULL,
    PRIMARY KEY (BOARD_ID),
    FOREIGN KEY (WISHLIST_ID) REFERENCES WISHLIST(WISHLIST_ID)
);



CREATE TABLE IF NOT EXISTS LIKES (
    LIKE_ID bigint NOT NULL AUTO_INCREMENT,
    MEMBER_ID bigint NOT NULL,
    BOARD_ID bigint NOT NULL,
    STATUS varchar(100) NOT NULL,
    CREATED_AT datetime NOT NULL,
    PRIMARY KEY (LIKE_ID),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
    FOREIGN KEY (BOARD_ID) REFERENCES BOARD(BOARD_ID)
);

CREATE TABLE IF NOT EXISTS COMMENT (
    COMMENT_ID bigint NOT NULL AUTO_INCREMENT,
    MEMBER_ID bigint NOT NULL,
    BOARD_ID bigint NOT NULL,
    CREATED_AT datetime NOT NULL,
    COMMENT varchar(100) NOT NULL,
    STATUS varchar(100) NOT NULL,
    PRIMARY KEY (COMMENT_ID),
    FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
    FOREIGN KEY (BOARD_ID) REFERENCES BOARD(BOARD_ID)
);








